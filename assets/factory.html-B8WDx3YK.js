import{_ as a,e as t,f as n,o as l}from"./app-D5cJu0df.js";const r={};function s(c,e){return l(),t("div",null,e[0]||(e[0]=[n('<h2 id="设计模式之工厂模式——factory" tabindex="-1"><a class="header-anchor" href="#设计模式之工厂模式——factory"><span>设计模式之工厂模式——Factory</span></a></h2><p><strong>工厂模式大体分为简单工厂、工厂方法、抽象工厂等三种模式，简单工厂进阶变成了工厂方法，然后再进阶成了抽象工厂。越来越抽象。</strong></p><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p>工厂方法模式定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。</p><h3 id="简单工厂" tabindex="-1"><a class="header-anchor" href="#简单工厂"><span>简单工厂</span></a></h3><h3 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式"><span>工厂模式</span></a></h3><h3 id="抽象工厂" tabindex="-1"><a class="header-anchor" href="#抽象工厂"><span>抽象工厂</span></a></h3>',7)]))}const o=a(r,[["render",s],["__file","factory.html.vue"]]),h=JSON.parse('{"path":"/design/factory.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"设计模式之工厂模式——Factory","slug":"设计模式之工厂模式——factory","link":"#设计模式之工厂模式——factory","children":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"简单工厂","slug":"简单工厂","link":"#简单工厂","children":[]},{"level":3,"title":"工厂模式","slug":"工厂模式","link":"#工厂模式","children":[]},{"level":3,"title":"抽象工厂","slug":"抽象工厂","link":"#抽象工厂","children":[]}]}],"git":{"updatedTime":1575970487000,"contributors":[{"name":"88395515","username":"88395515","email":"88395515@cnsuning.com","commits":1,"url":"https://github.com/88395515"}],"changelog":[{"hash":"b20c75fd41900071cc75c661115086fa87869f8e","time":1575970487000,"email":"88395515@cnsuning.com","author":"88395515","message":"commit vueblog"}]},"filePathRelative":"design/factory.md"}');export{o as comp,h as data};
