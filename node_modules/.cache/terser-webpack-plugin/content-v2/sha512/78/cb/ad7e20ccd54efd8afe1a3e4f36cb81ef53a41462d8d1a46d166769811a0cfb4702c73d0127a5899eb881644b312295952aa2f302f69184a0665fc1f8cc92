{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{175:function(t,s,a){\"use strict\";a.r(s);var e=a(0),n=Object(e.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"content\"},[t._m(0),t._v(\" \"),t._m(1),t._v(\" \"),t._m(2),t._v(\" \"),t._m(3),t._v(\" \"),a(\"p\",[t._v(\"B+Tree(B-Tree)索引是最为常见的，在了解该索引前介绍y一下与之密切相关的数据结构：\")]),t._v(\" \"),t._m(4),t._v(\" \"),t._m(5),t._v(\" \"),t._m(6),t._v(\" \"),t._m(7),t._v(\" \"),t._m(8),t._v(\" \"),a(\"img\",{attrs:{src:t.$withBase(\"/index/2.png\"),alt:\"dock\"}}),t._v(\" \"),t._m(9),t._v(\" \"),t._m(10),t._v(\" \"),t._m(11),t._v(\" \"),a(\"p\",[t._v(\"综上所述，用B-Tree作为索引结构效率是非常高的。\")]),t._v(\" \"),t._m(12),t._v(\" \"),a(\"p\",[t._v(\"MySQL中，索引属于存储引擎级别的概念，不同存储引擎的索引实现有所区别，本次只讨论MyISAM和InnoDB两种存储引擎的索引实现方式。\")]),t._v(\" \"),t._m(13),t._v(\" \"),t._m(14),t._v(\" \"),a(\"p\",[t._v(\"MyISAM的索引方式是“非聚集”的，这么称呼是为了和InnoDB的聚集索引区分。\")]),t._v(\" \"),t._m(15),t._v(\" \"),t._m(16),t._v(\" \"),a(\"p\",[t._v(\"总结：\\n聚集索引这种实现方式使得按主键的搜索十分高效，但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。\")]),t._v(\" \"),a(\"p\",[t._v(\"知道了InnoDB索引实现后，就容易明白了为什么不建议使用过长的字段作为主键，因为这样会使辅助索引的data域过大。\")]),t._v(\" \"),a(\"p\",[t._v(\"使用非单调的字段作为InnoDB主键也不是个好主意，因为InnoDB数据文件本身是一个B+Tree,非单调的主键在插入新记录时，B+Tree数据结构为了维持顺序且平衡的特性会频繁分裂调整。十分低效，而使用自增字段作为主键是个好选择。\")]),t._v(\" \"),t._m(17),t._v(\" \"),t._m(18),t._v(\" \"),t._m(19),t._v(\" \"),t._m(20),t._v(\" \"),t._m(21),t._m(22),t._v(\" \"),t._m(23),t._m(24),t._v(\" \"),t._m(25),t._m(26),t._v(\" \"),t._m(27),t._m(28),t._v(\" \"),t._m(29),t._m(30),t._v(\" \"),a(\"p\",[t._v(\"在上文中，我们都是假设索引只引用了单个的列，实际上，MySQL中的索引可以以一定顺序引用多个列，这种索引叫做联合索引，单列索引可以看成联合索引元素数为1的特例。\")]),t._v(\" \"),t._m(31),t._v(\" \"),t._m(32),a(\"p\",[t._v(\"该表有一个联合索引<id,age,birthday>作为主键索引。\")]),t._v(\" \"),t._m(33),t._v(\" \"),t._m(34),a(\"img\",{attrs:{src:t.$withBase(\"/index/explain.png\"),alt:\"dock\"}}),t._v(\" \"),t._m(35),t._v(\" \"),t._m(36),a(\"img\",{attrs:{src:t.$withBase(\"/index/explain.png\"),alt:\"dock\"}}),t._v(\" \"),a(\"p\",[t._v(\"效果是一样的。\")]),t._v(\" \"),t._m(37),t._v(\" \"),t._m(38),a(\"img\",{attrs:{src:t.$withBase(\"/index/explain1.png\"),alt:\"dock\"}}),t._v(\" \"),a(\"p\",[t._v(\"当查询条件精确匹配索引的左边连续一个或几个列时，如(id)或(id, age)，所以可以被用到，但是只能用到一部分，即条件所组成的最左前缀。上面的查询从分析结果看用到了PRIMARY索引，但是key_len为4，说明只用到了索引的第一列前缀。\")]),t._v(\" \"),t._m(39),t._v(\" \"),t._m(40),a(\"img\",{attrs:{src:t.$withBase(\"/index/explain1.png\"),alt:\"dock\"}}),t._v(\" \"),t._m(41),t._v(\" \"),a(\"p\",[t._v(\"首先我们看看age的值\")]),t._v(\" \"),t._m(42),a(\"img\",{attrs:{src:t.$withBase(\"/index/explain2.png\"),alt:\"dock\"}}),t._v(\" \"),a(\"p\",[t._v(\"只有6种。在这种成为“坑”的列值比较少的情况下，可以考虑用“IN”来填补这个“坑”从而形成最左前缀：\")]),t._v(\" \"),t._m(43),a(\"img\",{attrs:{src:t.$withBase(\"/index/explain3.png\"),alt:\"dock\"}}),t._v(\" \"),t._m(44),t._v(\" \"),t._m(45),a(\"img\",{attrs:{src:t.$withBase(\"/index/explain4.png\"),alt:\"dock\"}}),t._v(\"\\n由于不是最左前缀，索引这样的查询显然用不到索引。\\n\"),t._m(46),t._v(\" \"),t._m(47),a(\"img\",{attrs:{src:t.$withBase(\"/index/explain5.png\"),alt:\"dock\"}}),t._v(\"\\n如果通配符%不出现在开头,此时可以用到索引,\\n\"),t._m(48),t._v(\" \"),a(\"p\",[t._v(\"如果查询条件中含有函数或表达式，则MySQL不会为这列使用索引。因此在写查询语句时尽量避免表达式出现在查询中，而是先手工私下代数运算，转换为无表达式的查询语句。\")]),t._v(\" \"),t._m(49),t._v(\" \"),a(\"p\",[t._v(\"既然索引可以加快查询速度，那么是不是只要是查询语句需要，就建上索引？答案是否定的。因为索引虽然加快了查询速度，但索引也是有代价的：索引文件本身要消耗存储空间，同时索引会加重插入、删除和修改记录时的负担，另外，MySQL在运行时也要消耗资源维护索引，因此索引并不是越多越好。一般两种情况下不建议建索引。\")]),t._v(\" \"),t._m(50),t._v(\" \"),t._m(51),a(\"p\",[t._v(\"查看emp表中last_name字段的选择性：\\n\"),a(\"img\",{attrs:{src:t.$withBase(\"/index/explain6.png\"),alt:\"dock\"}})]),t._v(\" \"),a(\"p\",[t._v(\"本例中，last_name选择性是1，有必要建立索引。\")]),t._v(\" \"),a(\"p\",[t._v(\"如果我想要用人名来查询，由于没有索引，会全表查询，这时候我们考虑可以建索引，此时有两种选择(first_name)或者(first_name,last_name)，看一下选择性。\")]),t._v(\" \"),t._m(52),a(\"img\",{attrs:{src:t.$withBase(\"/index/explain7.png\"),alt:\"dock\"}}),t._v(\" \"),t._m(53),a(\"img\",{attrs:{src:t.$withBase(\"/index/explain6.png\"),alt:\"dock\"}}),t._v(\" \"),a(\"p\",[t._v(\"显示联合索引的选择性更高，但是first_name、last_name加起来长度太长，可以考虑用first_name和last_name的前几个字符建立索引：\")]),t._v(\" \"),t._m(54),a(\"p\",[t._v(\"前缀索引兼顾索引大小和查询速度，但是其缺点是不能用于ORDER BY和GROUP BY操作，也不能用于Covering index（即当索引本身包含查询所需全部数据时，不再访问数据文件本身）\")]),t._v(\" \"),t._m(55),t._v(\" \"),t._m(56),t._v(\" \"),t._m(57)])},[function(){var t=this.$createElement,s=this._self._c||t;return s(\"h2\",{attrs:{id:\"index-索引\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#index-索引\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" INDEX 索引\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"概述\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#概述\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 概述\")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"ul\",[a(\"li\",[t._v(\"索引（Index）是帮助MySQL高效获取数据的 \"),a(\"strong\",[t._v(\"数据结构\")]),t._v(\"。\")]),t._v(\" \"),a(\"li\",[t._v(\"索引对于良好性能十分关键，数据量小的时候，不恰当的索引对性能影响可能还不明细。当数据量大的时候，性能会 \"),a(\"strong\",[t._v(\"急剧下降\")]),t._v(\"。\")]),t._v(\" \"),a(\"li\",[t._v(\"索引优化应该是对查询性能优化最有效的手段了。索引能轻易把查询性能提高几个数量级。\"),a(\"code\",[t._v(\"最优\")]),t._v(\" 的索引有时候比一个 \"),a(\"code\",[t._v(\"好的\")]),t._v(\" 索引性能要好两个数量级。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"索引的数据结构\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#索引的数据结构\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 索引的数据结构\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"二分查找法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二分查找法\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 二分查找法\")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"用来查找一组\"),a(\"strong\",[t._v(\"有序\")]),t._v(\"记录中的某条数据，其基本思想是：将记录按有序化排列，在查找中采用跳跃式方式查找，既以有序数列中点为比较对象。如果查找对象小于中点对象，则抛弃右边部分，然后再次对比，直到找到对象。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"B+Tree(B-Tree)索引构造类似\"),a(\"strong\",[t._v(\"平衡二叉树\")]),t._v(\"，根据\"),a(\"code\",[t._v(\"key\")]),t._v(\"快速找到数据。B+Tree并不能找到一个给定key的具体行，但是索引能找到数据所在页，然后把页读入内存中进行查找。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"平衡树查询的速度很快，但是维护一颗平衡树开销很大，需要一次或多次的左旋或右旋使新增或者修改后的数据保持树平衡性。\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"b-tree-和-b-tree\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#b-tree-和-b-tree\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" B-Tree 和 B+Tree\")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"tip custom-block\"},[a(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"TIP\")]),t._v(\" \"),a(\"p\",[t._v(\"名词概念：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"叶子节点：就是没有子节点的节点\")]),t._v(\" \"),a(\"li\",[t._v(\"扇出：本文中指的是索引树每层节点个数\")]),t._v(\" \"),a(\"li\",[t._v(\"主索引：聚集索引中的主键索引\")]),t._v(\" \"),a(\"li\",[t._v(\"辅助索引：叶子节点保存了主键key值的索引。\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ul\",[s(\"li\",[this._v(\"B+Tree 结构如图：\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ul\",[s(\"li\",[s(\"p\",[this._v(\"B+Tree(B-Tree)是为磁盘或者其它存取辅助设备设计的一种\"),s(\"strong\",[this._v(\"平衡查找树\")]),this._v(\"，所有记录节点按Key的大小顺序存放同一层的叶子节点上。各叶子节点由指针连接。\")])]),this._v(\" \"),s(\"li\",[s(\"p\",[this._v(\"B+Tree(B-Tree)是一个二元组[key, data]，key为记录的键值，对于不同数据记录，key是互不相同的；data为数据记录除key外的数据。\")])]),this._v(\" \"),s(\"li\",[s(\"p\",[this._v(\"B+Tree是B-Tree的变种，MySQL就普遍使用B+Tree实现其索引结构。B+Tree非叶子节点只存储key,data存储在叶子节点中。\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"b-tree索引的性能分析\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#b-tree索引的性能分析\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" B-/+Tree索引的性能分析\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ul\",[s(\"li\",[s(\"p\",[this._v(\"由于磁盘本身存取就比内存慢很多，为了尽可能减少I/O，磁盘每次读取文件会预读，即使读一个字节，也会顺序向后读取一定长度的数据放入内存。预读的长度一般以页（page）的整倍数。\")])]),this._v(\" \"),s(\"li\",[s(\"p\",[this._v(\"数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入。\")])]),this._v(\" \"),s(\"li\",[s(\"p\",[this._v(\"B+Tree树索引一个特点是高扇出性，因此在数据库中B+Tree树索引高度一般都在2~4层，也就是说查一条数据只需要2~4次I/O.\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"mysql索引实现\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mysql索引实现\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" MySQL索引实现\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"myisam索引实现\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#myisam索引实现\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" MyISAM索引实现\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ul\",[s(\"li\",[s(\"p\",[this._v(\"MyISAM引擎使用B+Tree作为索引结构，叶子节点存储的是数据记录的\"),s(\"strong\",[this._v(\"物理地址\")]),this._v(\"。\")])]),this._v(\" \"),s(\"li\",[s(\"p\",[this._v(\"MyISAM中，主索引和辅助索引在结构上没有任何区别，只是主索引要求Key是唯一的，而辅助索引不用。\")])]),this._v(\" \"),s(\"li\",[s(\"p\",[this._v(\"在MyISAM中，索引检索的算法为首先按照B+Tree搜索算法搜索索引，如果找到Key,则取出data值，根据data保存的地址找出数据。\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"innodb索引实现\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#innodb索引实现\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" InnoDB索引实现\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ul\",[s(\"li\",[s(\"p\",[this._v(\"InnoDB引擎也是使用B+Tree作为索引数据结构，但是InnoDB中，表数据结构本身就是按照B+Tree组织的索引结构，其叶子节点data域保存的是这条\"),s(\"strong\",[this._v(\"完整数据\")]),this._v(\"。这个索引的key就是表的主键。\")])]),this._v(\" \"),s(\"li\",[s(\"p\",[this._v(\"因为其叶子节点保存着完整数据，这种索引叫做聚集索引，所以InnoDB要求必须有主键，如果没有显式指定，则MySQL系统会自动选择一个可以作为唯一标识的列作为主键，如果不存在这种列，MySQL会隐式生成一个字段作为主键，这个字段长6个字节，类型为长整形。\")])]),this._v(\" \"),s(\"li\",[s(\"p\",[this._v(\"InnoDB的辅助索引data域存储的是主键的值而不是地址，换句话说，InnoDB所有的辅助索引都是引用主键作为data域。\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"索引使用策略以及优化\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#索引使用策略以及优化\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 索引使用策略以及优化\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"MySQL优化主要分为\"),s(\"code\",[this._v(\"结构优化\")]),this._v(\"和\"),s(\"code\",[this._v(\"查询优化\")]),this._v(\"。本次主要讨论的高性能索引策略属于结构优化范畴。\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"索引类型\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#索引类型\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 索引类型\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ul\",[s(\"li\",[this._v(\"PRIMARY KEY（主键索引）\")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"ALTER\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"TABLE\")]),t._v(\" table_name \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"ADD\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"PRIMARY\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"KEY\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"column\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ul\",[s(\"li\",[this._v(\"UNIQUE(唯一索引)\")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"ALTER\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"TABLE\")]),t._v(\" table_name \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"ADD\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"UNIQUE\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"column\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ul\",[s(\"li\",[this._v(\"INDEX(普通索引)\")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"ALTER\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"TABLE\")]),t._v(\" table_name \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"ADD\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"INDEX\")]),t._v(\" index_name \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"column\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ul\",[s(\"li\",[this._v(\"FULLTEXT(全文索引)\")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"ALTER\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"TABLE\")]),t._v(\" table_name \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"ADD\")]),t._v(\" FULLTEXT \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"column\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ul\",[s(\"li\",[this._v(\"多列索引\")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"ALTER\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"TABLE\")]),t._v(\" table_name \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"ADD\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"INDEX\")]),t._v(\" index_name \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\" column1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" column2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" column3 \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"联合索引概念\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#联合索引概念\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 联合索引概念\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"实例表\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实例表\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 实例表\")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"DROP\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"TABLE\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"IF\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"EXISTS\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\"emp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"CREATE\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"TABLE\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\"emp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\"id\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"11\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"NOT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\"first_name\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"varchar\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"16\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"DEFAULT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\"last_name\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"varchar\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"16\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"DEFAULT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\"age\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"11\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"NOT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\"birthday\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"date\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"NOT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\"remark\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"varchar\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"64\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"DEFAULT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"NULL\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"PRIMARY\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"KEY\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\"id\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\"age\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\"birthday\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"ENGINE\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"InnoDB\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"DEFAULT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"CHARSET\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"utf8\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"-- ----------------------------\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"-- Records of emp\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"-- ----------------------------\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"INSERT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"INTO\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\"emp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"VALUES\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'1'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'jim'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'green'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'18'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'2003-06-01'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'吉姆'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"INSERT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"INTO\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\"emp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"VALUES\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'2'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'li'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'lei'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'17'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'2004-12-03'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'李雷'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"INSERT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"INTO\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\"emp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"VALUES\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'4'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'eric'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'anido'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'19'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'2002-11-20'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'eric'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"INSERT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"INTO\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\"emp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"VALUES\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'5'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'leBron'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'james'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'35'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'1983-12-03'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'勒布朗'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"INSERT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"INTO\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\"emp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"VALUES\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'6'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'kobe'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'bryant'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'38'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'1980-09-12'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'科比'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"INSERT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"INTO\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\"emp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"VALUES\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'7'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'allen'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'inversion'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'40'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'1979-08-13'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'艾佛森'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"INSERT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"INTO\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\"emp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"`\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"VALUES\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'8'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'li'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'james'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'17'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'2019-12-03'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'jackma'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"情况一：全列匹配\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#情况一：全列匹配\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 情况一：全列匹配\")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"EXPLAIN\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"SELECT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"FROM\")]),t._v(\" emp \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"WHERE\")]),t._v(\" id \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"AND\")]),t._v(\" age \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"in\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'18'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"AND\")]),t._v(\" birthday \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'2003-06-01'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"当按照索引中所有列进行\"),s(\"strong\",[this._v(\"精确匹配（这里精确匹配指“=”或“IN”匹配）\"),s(\"strong\",[this._v(\"时，索引可以被用到。这里有一点需要注意，理论上索引对顺序是敏感的，但是由于MySQL的查询优化器会\")]),this._v(\"自动调整where子句的条件顺序以使用适合的索引\")]),this._v(\"，例如我们将where中的条件顺序颠倒：\")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"EXPLAIN\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"SELECT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"FROM\")]),t._v(\" emp \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"WHERE\")]),t._v(\" id \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\"  \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"AND\")]),t._v(\" birthday \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'2003-06-01'\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"AND\")]),t._v(\" age \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"in\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'18'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"情况二：最左前缀匹配。\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#情况二：最左前缀匹配。\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 情况二：最左前缀匹配。\")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"EXPLAIN\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"SELECT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"FROM\")]),t._v(\" emp \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"WHERE\")]),t._v(\" id \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"情况三：查询条件用到了索引中列的精确匹配，但是中间某个条件未提供。\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#情况三：查询条件用到了索引中列的精确匹配，但是中间某个条件未提供。\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 情况三：查询条件用到了索引中列的精确匹配，但是中间某个条件未提供。\")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"EXPLAIN\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"SELECT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"FROM\")]),t._v(\" emp \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"WHERE\")]),t._v(\" id \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"AND\")]),t._v(\" birthday \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'2003-06-01'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"p\",[t._v(\"此时索引使用情况和情况二相同，因为\"),a(\"code\",[t._v(\"age\")]),t._v(\"未提供，所以查询只用到了索引的第一列，虽然后面有\"),a(\"code\",[t._v(\"birthday\")]),t._v(\"，但是由于\"),a(\"code\",[t._v(\"age\")]),t._v(\"不存在而无法和左前缀连接。如果想让\"),a(\"code\",[t._v(\"birthday\")]),t._v(\"也使用索引而不是\"),a(\"code\",[t._v(\"where\")]),t._v(\"过滤，可以增加一个辅助索引(id, birthday)，此时上面的查询会使用这个索引。除此之外，还可以使用一种称之为“隔离列”的优化方法，将\"),a(\"code\",[t._v(\"id\")]),t._v(\"与\"),a(\"code\",[t._v(\"birthday\")]),t._v(\"之间的“坑”填上。\")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"SELECT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"DISTINCT\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"age\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"FROM\")]),t._v(\" emp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"EXPLAIN\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"SELECT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"FROM\")]),t._v(\" emp \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"WHERE\")]),t._v(\" id \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"AND\")]),t._v(\" age \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"in\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'17'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'18'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'19'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'35'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'38'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'40'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"AND\")]),t._v(\" birthday \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'2003-06-01'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"情况四：查询条件没有指定索引第一列。\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#情况四：查询条件没有指定索引第一列。\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 情况四：查询条件没有指定索引第一列。\")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"EXPLAIN\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"SELECT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"FROM\")]),t._v(\" emp \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"WHERE\")]),t._v(\" birthday \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'2003-06-01'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"情况五：匹配某列的前缀字符串。\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#情况五：匹配某列的前缀字符串。\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 情况五：匹配某列的前缀字符串。\")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"EXPLAIN\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"SELECT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"FROM\")]),t._v(\" emp \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"WHERE\")]),t._v(\" id \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"AND\")]),t._v(\" age \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"LIKE\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'1%'\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"情况六：查询条件中含有函数或表达式。\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#情况六：查询条件中含有函数或表达式。\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 情况六：查询条件中含有函数或表达式。\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"索引选择性与前缀索引\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#索引选择性与前缀索引\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 索引选择性与前缀索引\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ul\",[s(\"li\",[s(\"p\",[this._v(\"第一种情况是表记录比较少，例如一两千条甚至只有几百条记录的表，没必要建索引，让查询做全表扫描就好了。至于多少条记录才算多，这个个人有个人的看法，我个人的经验是以2000作为分界线，记录数不超过 2000可以考虑不建索引，超过2000条可以酌情考虑索引。\")])]),this._v(\" \"),s(\"li\",[s(\"p\",[this._v(\"另一种不建议建索引的情况是索引的选择性较低。所谓索引的选择性（Selectivity），是指不重复的索引值（也叫基数，Cardinality）与表记录数（#T）的比值，选择性的取值范围为(0, 1]，选择性越高的索引价值越大，这是由B+Tree的性质决定的。\")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"SELECT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"count\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"DISTINCT\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"last_name\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"count\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"AS\")]),t._v(\" Selectivity \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"FROM\")]),t._v(\" emp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"SELECT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"count\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"DISTINCT\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"first_name\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"count\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"AS\")]),t._v(\" Selectivity \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"FROM\")]),t._v(\" emp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"SELECT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"count\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"DISTINCT\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"concat\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"first_name\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" last_name\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"count\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"AS\")]),t._v(\" Selectivity \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"FROM\")]),t._v(\" emp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"SELECT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"count\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"DISTINCT\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"concat\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"first_name\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"left\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"last_name\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"count\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"AS\")]),t._v(\" Selectivity \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"FROM\")]),t._v(\" emp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"innodb的主键选择与插入优化\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#innodb的主键选择与插入优化\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" InnoDB的主键选择与插入优化\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"strong\",[this._v(\"在使用InnoDB存储引擎时，如果没有特别的需要，请永远使用一个与业务无关的自增字段作为主键。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ul\",[s(\"li\",[this._v(\"如果表使用自增主键，那么每次插入新的记录，记录就会顺序添加到当前索引节点的后续位置，当一页写满，就会自动开辟一个新的页。\")]),this._v(\" \"),s(\"li\",[this._v(\"如果使用非自增主键（如果身份证号或学号等），由于每次插入主键的值近似于随机，因此每次新纪录都要被插到现有索引页得中间某个位置，此时MySQL不得不为了将新记录插到合适位置而移动数据，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了很多开销，同时频繁的移动、分页操作造成了大量的碎片，得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE TABLE来重建表并优化填充页面。\")])])}],!1,null,null,null);s.default=n.exports}}]);","extractedComments":[]}