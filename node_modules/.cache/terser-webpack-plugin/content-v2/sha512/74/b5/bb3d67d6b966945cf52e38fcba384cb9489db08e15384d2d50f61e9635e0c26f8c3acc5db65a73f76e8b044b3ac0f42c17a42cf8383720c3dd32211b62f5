{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{452:function(a,t,r){\"use strict\";r.r(t);var i=r(43),v=Object(i.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[r(\"h2\",{attrs:{id:\"rabbitmq-基础\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rabbitmq-基础\"}},[a._v(\"#\")]),a._v(\" RabbitMQ 基础\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"rabbitmq-特性与好处\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rabbitmq-特性与好处\"}},[a._v(\"#\")]),a._v(\" RabbitMQ 特性与好处\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"任务异步处理\")]),a._v(\" \"),r(\"li\",[a._v(\"应用程序的解耦\")]),a._v(\" \"),r(\"li\",[a._v(\"削峰填谷\")])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#\"}},[a._v(\"#\")])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"rabbitmq-与-erlang\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rabbitmq-与-erlang\"}},[a._v(\"#\")]),a._v(\" RabbitMQ 与 Erlang\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"RabbitMQ是基于Erlang语言开发的消息代理服务器，Erlang被设计成一种分布式、高容错的软实时系统，作为一种开发语言，Erlang专注于节点之间消息通信的轻量级进程,提供了状态无关的高并发性。\")]),a._v(\" \"),r(\"li\",[a._v(\"Erlang的分布式通信架构天然可以构建RabbitMQ集群机制，RabbitMQ集群中服务器充分利用Erlang进程间通信，而其它消息代理服务器不得不自己实现集群功能。\")])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"rabbitmq-与-amqp\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rabbitmq-与-amqp\"}},[a._v(\"#\")]),a._v(\" RabbitMQ 与 AMQP\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"AMQP 是一个提供统一消息服务的应用层标准高级消息队列协议，并不受客户端/中间件同产品，不同的开发语言等条件的限制。通过 AMQP, RabbitMQ 致力于成为 与供应商无关、平台独立的解决方案。\")])]),a._v(\" \"),r(\"h3\",{attrs:{id:\"消息队列模型\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#消息队列模型\"}},[a._v(\"#\")]),a._v(\" 消息队列模型\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"RabbitMQ的强大性和灵活性来自与AMQP协议，该规范不仅定义了一种网络协议，还定义了服务端的服务和行为，这些信息就是高级队列（Adcancee Message Quenuing AMQ）模型，针对代理服务软件，AMQ模型在逻辑上定义了三个抽象组件用于指定消息的路由行为：\\n\"),r(\"ul\",[r(\"li\",[r(\"code\",[a._v(\"交换器（Exchange）\")]),a._v(\",消息队列服务器中用于把消息路由到队列的组件。\")]),a._v(\" \"),r(\"li\",[r(\"code\",[a._v(\"队列（Queue）\")]),a._v(\",用于储存消息的数据结构，位于硬盘或者内存中。\")]),a._v(\" \"),r(\"li\",[r(\"code\",[a._v(\"绑定（Binding）\")]),a._v(\",一套规则，用于告诉交换机消息应该被存储在哪个队列。\")])])]),a._v(\" \"),r(\"li\",[r(\"strong\",[a._v(\"交换器\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"交换器是接收RabbitMQ中的消息并决定把它们投递到何处。交换器定义消息的路由行为，通常这需要检查消息所携带的数据特性或者包含在消息体内的各种属性。\")])])]),a._v(\" \"),r(\"li\",[r(\"strong\",[a._v(\"队列\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"队列负责存储接收的消息，同时也可能包含如何处理消息的配置信息，队列可以把消息只存储在内存中，也可以存储在硬盘中，然后以先进先出（FIFO）的顺序投递。\")])])]),a._v(\" \"),r(\"li\",[r(\"strong\",[a._v(\"绑定\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"AMQ中绑定用来定义队列和交换器之间的关系。在RabbitMQ中，绑定键（binding-key）告知交换器要投递消息到哪个队列，当发布消息到交换器时，应用程序使用路由键（routing-key）属性。当交换器对一条消息进行评估决定路由到哪个队列时，消息的路由键和绑定键进行对比。\")])])])])])}),[],!1,null,null,null);t.default=v.exports}}]);","extractedComments":[]}