{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{400:function(t,a,l){\"use strict\";l.r(a);var e=l(43),v=Object(e.a)({},(function(){var t=this,a=t.$createElement,l=t._self._c||a;return l(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[l(\"h2\",{attrs:{id:\"volatile关键字\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#volatile关键字\"}},[t._v(\"#\")]),t._v(\" volatile关键字\")]),t._v(\" \"),l(\"h3\",{attrs:{id:\"volatile主要作用是保证可见性以及有序性-（原子性由锁保证）\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#volatile主要作用是保证可见性以及有序性-（原子性由锁保证）\"}},[t._v(\"#\")]),t._v(\" volatile主要作用是保证可见性以及有序性 （原子性由锁保证）\")]),t._v(\" \"),l(\"h3\",{attrs:{id:\"可见性\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#可见性\"}},[t._v(\"#\")]),t._v(\" 可见性\")]),t._v(\" \"),l(\"ul\",[l(\"li\",[l(\"p\",[t._v(\"JMM | Java Memory Model\")]),t._v(\" \"),l(\"ul\",[l(\"li\",[t._v(\"java内存模型定义了线程和主线程直接的抽象关系，线程之间的共享变量存储在主内存中，每个线程都有一个私有的本地内存，本地内存存储了共享变量的副本\")]),t._v(\" \"),l(\"li\",[t._v(\"JMM这种机制，就会导致了可能出现的可见性问题，即线程A修改了本地内存未及时刷新到主内存，从而导致其它线程使用的共享变量值不是最新的\")])])]),t._v(\" \"),l(\"li\",[l(\"p\",[t._v(\"使用 volatile 修饰共享变量后，每个线程要操作变量时会从主内存中将变量拷贝到本地内存作为副本，当线程操作变量副本并写回主内存后，会通过\"),l(\"code\",[t._v(\"CPU 总线嗅探机制\")]),t._v(\"告知其他线程该变量副本已经失效，需要重新从主内存中读取\")])])]),t._v(\" \"),l(\"h3\",{attrs:{id:\"有序性\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#有序性\"}},[t._v(\"#\")]),t._v(\" 有序性\")]),t._v(\" \"),l(\"ul\",[l(\"li\",[t._v(\"禁止指令重排\\n\"),l(\"ul\",[l(\"li\",[t._v(\"什么是指令重排：处理器为了提高程序运行效率，可能会对代码进行优化，它可能在不改变执行结果的前提下修改程序中各个语句执行顺序（重排不会影响单线程的执行，但是可能影响并发执行的正确性）\")])])])])])}),[],!1,null,null,null);a.default=v.exports}}]);","extractedComments":[]}