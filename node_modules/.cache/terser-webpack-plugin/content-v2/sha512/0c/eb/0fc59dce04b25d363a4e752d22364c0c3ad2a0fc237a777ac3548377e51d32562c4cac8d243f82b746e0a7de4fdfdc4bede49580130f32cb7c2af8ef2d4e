{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{227:function(a,t,e){\"use strict\";e.r(t);var s=e(0),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e(\"div\",{staticClass:\"content\"},[e(\"h2\",{attrs:{id:\"应用容器引擎-docker\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#应用容器引擎-docker\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 应用容器引擎-Docker\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"docker-概述\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#docker-概述\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" Docker 概述\")]),a._v(\" \"),e(\"h4\",{attrs:{id:\"docker是什么\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#docker是什么\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" docker是什么\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[a._v(\"Docker作为一个软件集装箱化平台，可以让开发者构建应用程序时，将它与其依赖环境一起打包到一个容器中，然后很容易地发布和应用到任意平台中。在操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[a._v(\"上面说的比较官方，简单来说，docker是一个能让应用运行的容器，类似虚拟机。\")])])]),a._v(\" \"),e(\"div\",{staticClass:\"tip custom-block\"},[e(\"p\",{staticClass:\"custom-block-title\"},[a._v(\"TIP\")]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"Docker与传统虚拟机比较\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"docker 启动快速属于秒级别。虚拟机通常需要几分钟去启动\")]),a._v(\" \"),e(\"li\",[a._v(\"docker 需要的资源更少， docker 在操作系统级别进行虚拟化， docker 容器和内核交互，几乎没有性能损耗，性能优于通过 Hypervisor 层与内核层的虚拟化\")]),a._v(\" \"),e(\"li\",[a._v(\"docker 更轻量， docker 的架构可以共用一个内核与共享应用程序库，所占内存极小。同样的硬件环境， Docker 运行的镜像数远多于虚拟机数量，对系统的利用率非常高\")]),a._v(\" \"),e(\"li\",[a._v(\"与虚拟机相比， docker 隔离性更弱， docker 属于进程之间的隔离，虚拟机可实现系统级别隔离\")]),a._v(\" \"),e(\"li\",[a._v(\"安全性： docker 的安全性也更弱。 Docker 的租户 root 和宿主机 root 等同，一旦容器内的用户从普通用户权限提升为root权限，它就直接具备了宿主机的root权限，进而可进行无限制的操作。虚拟机租户 root 权限和宿主机的 root 虚拟机权限是分离的，并且虚拟机利用如 Intel 的 VT-d 和 VT-x 的 ring-1 硬件隔离技术，这种隔离技术可以防止虚拟机突破和彼此交互，而容器至今还没有任何形式的硬件隔离，这使得容器容易受到攻击\")]),a._v(\" \"),e(\"li\",[a._v(\"可管理性： docker 的集中化管理工具还不算成熟。各种虚拟化技术都有成熟的管理工具，例如 VMware vCenter 提供完备的虚拟机管理能力\\n高可用和可恢复性： docker 对业务的高可用支持是通过快速重新部署实现的。虚拟化具备负载均衡，高可用，容错，迁移和数据保护等经过生产实践检验的成熟保障机制， VMware 可承诺虚拟机 99.999% 高可用，保证业务连续性\")]),a._v(\" \"),e(\"li\",[a._v(\"快速创建、删除：虚拟化创建是分钟级别的， Docker 容器创建是秒级别的， Docker 的快速迭代性，决定了无论是开发、测试、部署都可以节约大量时间\")]),a._v(\" \"),e(\"li\",[a._v(\"交付、部署：虚拟机可以通过镜像实现环境交付的一致性，但镜像分发无法体系化。 Docker 在 Dockerfile 中记录了容器构建过程，可在集群中实现快速分发和快速部署\")])])]),a._v(\" \"),e(\"h3\",{attrs:{id:\"docker-核心\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#docker-核心\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" Docker 核心\")]),a._v(\" \"),e(\"h4\",{attrs:{id:\"docker-三个基本概念\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#docker-三个基本概念\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" docker 三个基本概念:\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"Images (镜像)\")]),a._v(\" : 镜像可以看作一个文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"Container (容器)\")]),a._v(\" : 容器是放置，运行镜像的地方，里面运行着我们指定的应用。\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"Repository (仓库)\")]),a._v(\" : 仓库可以看作存放镜像的地方，当镜像构建完成后，我们需要一个集中存储，分发管理的服务。仓库类似于我们之前常用的代码仓库。\")])])]),a._v(\" \"),e(\"h3\",{attrs:{id:\"docker-的优势\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#docker-的优势\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" Docker 的优势\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[a._v(\"容器就可以实现方便快速并且与平台解耦的自动化部署方式，无论你部署时的环境如何，容器中的应用程序都会运行在同一种环境下,简单来说，docker的标准化让快速扩展，弹性伸缩变得简单。\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[a._v(\"举个例子：小明写了一个系统，该系统的技术栈非常广，需要依赖于各种开源库和中间件。如果按照纯手动的部署方式，小明需要安装各种开源软件，还需要写好每个开源软件的配置文件。如果只是部署一次，这点时间开销还是可以接受的，但如果小明每隔几天就需要换个服务器去部署他的程序，那么这些繁琐的重复工作无疑是会令人发狂的。这时候，Docker的用处就派上场了，小明只需要根据应用程序的部署步骤编写一份Dockerfile文件（将安装、配置等操作交由Docker自动化处理），然后构建并发布他的镜像，这样，不管在什么机器上，小明都只需要拉取他需要的镜像，然后就可以直接部署运行了，这正是Docker的魅力所在。\")])])]),a._v(\" \"),e(\"h3\",{attrs:{id:\"docker安装\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#docker安装\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" docker安装\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[a._v(\"根据自己的系统下载安装docker\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[a._v(\"登陆 \"),e(\"code\",[a._v(\"https://cr.console.aliyun.com/\")]),a._v(\"，按照操作文档配置阿里云镜像\")])])]),a._v(\" \"),e(\"h3\",{attrs:{id:\"docker命令\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#docker命令\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" docker命令\")]),a._v(\" \"),e(\"h4\",{attrs:{id:\"镜像命令\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#镜像命令\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 镜像命令\")]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"#拉取一个 docker 镜像,不指定版本默认最新:latest\\ndocker pull java\\n\\n# 拉取一个指定版本\\ndocker pull java:8\\n\\n# 查看镜像\\ndocker images\\n\")])])]),e(\"h4\",{attrs:{id:\"容器命令\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#容器命令\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 容器命令\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"启动容器\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"#启动容器\\ndocker run [OPTION]  IMAGE [COMMAND] [ARG...]\\n# OPTION 说明\\n\\x3c!--\\n    --name 为容器起一个新名称\\n    -d 后台启动容器，守护线程的方式，返回id\\n    -i  交互式模式启动容器，通常与-t一起使用\\n    -t  为容器重新分配一个伪输入终端\\n    -P 随即端口启动\\n    -p 指定端口映射，有以下四种格式：\\n      ip:hostPort:containerPort\\n      ip::containerPort\\n      hostPort:containerPort\\n      containerPort\\n --\\x3e\\n# 运行一个镜像，并对其指定端口映射(springboot_web的 8080端口映射为80)\\ndocker run -d -p 80:8080 springboot_web\\n# 运行这个容器中的镜像的话，并且调用镜像里面的 bash\\ndocker run -it container_name/container_id /bin/bash\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"退出容器\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"exit 停止容器\\nctrl+p+q 不停止容器退出容器终端\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"列出所以正在运行的容器\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"\\n# 查看哪些容器运行\\ndocker ps  [OPTION]\\n\\n# OPTION说明\\n\\x3c!--\\n-a 正在运行和历史运行的容器\\n-l  显示最近创建的容器\\n-n 显示最近n个创建的容器\\n-q  静默模式，只显示容器id\\n--no-trunc 不截断输出 \\n--\\x3e\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"启动容器、 重启、停止容器\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"\\n# 启动、重启、停止容器\\ndocker start container_name/container_id\\ndocker restart container_name/container_id\\ndocker stop container_name/container_id\\n\\n# 如果我们需要删除某个镜像，需要先停止容器，然后删除容器，最后删除镜像\\ndocker ps\\ndocker stop container_name/container_id\\ndocker rm container_name/container_id\\ndocker rmi image_name\\n\\n# 强制停止容器\\ndocker kill container_name/container_id\\n\\n#删除多个容器\\ndocker rm $(docker ps -a -q)\\n\")])])]),e(\"h4\",{attrs:{id:\"容器重要命令\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#容器重要命令\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 容器重要命令\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"启动守护式容器\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"docker run -d container_name/container_id\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"查看容器日志\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"# -t 加入时间戳  -f不停的追加（动态） -tail linux命令 尾巴\\ndocker logs -f -t --tail container_id\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"查看容器运行的线程\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"docker top container_id\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"查看容器内部细节\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"docker inspect container_id\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"进入正在运行的容器并以命令交互\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"# 对容器进行bashShell操作，得到结果回到宿主机\\ndocker exec -t container_id bashShell \\n\\n# 直接进入容器并启动终端\\ndocker attach container_id\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"从容器内拷贝数据到主机\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"docker cp container_id:容器内路径 目的主机路径\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"这里罗列是常用命令，更多命令参照:\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"docker --help\\n\")])])]),e(\"h3\",{attrs:{id:\"镜像原理\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#镜像原理\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 镜像原理\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"镜像就像一层层的嵌套，比如一个tomcat,它下面依赖jdk,jdk又依赖centos。层都是只读的，只有最上面一层是可写。\")])]),a._v(\" \"),e(\"h3\",{attrs:{id:\"容器数据卷\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#容器数据卷\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 容器数据卷\")]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"容器卷能干什么：\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[a._v(\"用来持久花容器中运行产生的数据。\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[a._v(\"容器之间希望可以共享数据（一边修改另一边也改变）\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[a._v(\"容器和宿主机之间共享数据（一边修改另一边也改变）\")])])]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"容器卷的特点：\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[a._v(\"数据卷可以在容器之间共享或者重用数据\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[a._v(\"卷中的更改可以直接生效\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[a._v(\"数据卷的更改不会包含在镜像的更新中\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[a._v(\"数据卷的生命周期一直持续到没有容器使用它为止\")])])]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"容器中添加容器卷\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[a._v(\"直接命令添加\")])])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"docker run -it -v /宿主机绝对路径:/容器内目录    镜像名\\n# centos 宿主机/media/ws/disk1/下生成myVolume，镜像中根目录生成volume目录\\ndocker run -it -v /media/ws/disk1/myVolume:/volume centos\\n\\n# 只允许宿主机单项写入，容器内只读\\ndocker run -it -v /media/ws/disk1/volume:/volume:ro centos\\n\\n#  tips 容器停止后，主机修改数据，容器重启仍然会同步\\n\")])])]),e(\"ul\",[e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"Dockerfile添加\")])])]),a._v(\" \"),e(\"li\",[e(\"p\",[a._v(\"Dockerfile 简单来说是构建镜像内容的一组命令。通过Dockerfile我们可以自定义镜像，让其能够运行在容器中。\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[a._v(\"比喻：\")])])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"Hello.java =====> Hello.class\\n\\nDocker images ======> Dockerfile\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"步骤\\n\"),e(\"ul\",[e(\"li\",[a._v(\"目录下新建Dockerfile\\n\"),e(\"ul\",[e(\"li\",[a._v(\"Dockerfile新建VOLUME来个容器创建一个或多个容器卷\")])])]),a._v(\" \"),e(\"li\",[a._v(\"File构建\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v('# mkdir一个mydocker文件夹\\n# touch一个Dockerfile\\n# vi 编辑以下内容:wq!\\n# 创建两个容器卷dataVolumeContainer1 dataVolumeContainer2\\nFROM centos\\nVOLUME [\"/dataVolumeContainer1\",\"/dataVolumeContainer2\"]\\nCMD echo \"finished,--------------success\"\\nCMD /bin/bash\\n\\n')])])]),e(\"ul\",[e(\"li\",[a._v(\"build后生成镜像\")])])])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"docker build -f /mydocker/Dockerfile -t ws/mycentos .\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"run容器\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"docker run -it ws/centos /bin/bash\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"如何跟宿主机关联？\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"# 重开终端或者var/bin/docker/volumes中查找\\ndocker inspect ws/centos\\n\")])])]),e(\"h3\",{attrs:{id:\"dockerfile\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dockerfile\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" DOCKERFILE\")]),a._v(\" \"),e(\"h4\",{attrs:{id:\"dockerfile是什么\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dockerfile是什么\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" Dockerfile是什么\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[a._v(\"Dockerfile是用来构建docker镜像的构建文件，是由一系列命令和参数构成的脚本\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[a._v(\"构建三步骤:\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"Dockerfile\")]),a._v(\" \"),e(\"li\",[a._v(\"docker build\")]),a._v(\" \"),e(\"li\",[a._v(\"docker run\")])])])]),a._v(\" \"),e(\"h4\",{attrs:{id:\"dockerfile的构建过程\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dockerfile的构建过程\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" Dockerfile的构建过程\")]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"Dockerfile内容的基础知识：\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"每条保留指令都必须大写，并且后面必须跟随至少一个参数\")]),a._v(\" \"),e(\"li\",[a._v(\"指令从上到下顺序执行\")]),a._v(\" \"),e(\"li\",[a._v(\"#表示注释\")]),a._v(\" \"),e(\"li\",[a._v(\"每条指令会创建一个新的镜像层，并对镜像进行提交\")])]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"docker执行Dockerfile大致流程：\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"docker从基础镜像运行一个容器\")]),a._v(\" \"),e(\"li\",[a._v(\"执行一条指令对容器作出修改\")]),a._v(\" \"),e(\"li\",[a._v(\"执行类似docker commit的命令提交一个新的镜像层\")]),a._v(\" \"),e(\"li\",[a._v(\"docker再基于刚提交的镜像运行一个新容器\")]),a._v(\" \"),e(\"li\",[a._v(\"执行Dockerfile中的下一条指令直到所有执行执行完成\")])]),a._v(\" \"),e(\"h4\",{attrs:{id:\"dockerfile的体系结构（保留字指令）\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dockerfile的体系结构（保留字指令）\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" Dockerfile的体系结构（保留字指令）\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"FROM\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"当前镜像是基于哪个镜像（scratch是最上层的镜像，类似java中的Object）\")])])]),a._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"MAINTAINER\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"镜像维护者以及邮箱\")])])]),a._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"RUN\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"构建时需要运行的命令\")])])]),a._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"EXPOSE\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"对外暴露的端口\")])])]),a._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"WORKDIR\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"指定在创建容器后，终端进入(-it)后默认的工作目录\")])])]),a._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"ENV\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"用来在构建镜像过程中设置环境变量\")])])]),a._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"ADD\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"将宿主机目录下的文件拷贝进镜像，且命令会自动处理URL和解压tar包\")])])]),a._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"COPY\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"类似ADD，拷贝文件到镜像，\")])])]),a._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"VOLUME\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"数据容器卷，用来保存容器数据到宿主机\")])])]),a._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"CMD\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"指定一个容器运行时要执行的命令\")]),a._v(\" \"),e(\"li\",[a._v(\"Dockerfile中可以有多个CMD命令，但只有最后一个生效，CMD会被docker run之后的参数替换\")])])]),a._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"ENTRYPOINT\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"指定一个容器运行时要执行的命令\")]),a._v(\" \"),e(\"li\",[a._v(\"ENTRYPOINT和CMD一样，都是在指定容器启动程序和参数\")])])]),a._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"ONBUILD\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"当构建一个被继承的Dockerfile时运行命令，父镜像在被子镜像继承后，父镜像的ONBUILD会被触发\")])])])]),a._v(\" \"),e(\"h4\",{attrs:{id:\"案例\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#案例\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 案例\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"Base镜像scratch\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"docker hub中99%的镜像都是通过在base镜像中安装和配置需要的软件构建出来的\")])])]),a._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"自定义镜像mycentos\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"假设我们下载的centos以及不满足使用的，我需要一个能运行vim的centos.\")]),a._v(\" \"),e(\"li\",[a._v(\"构建Dockerfile\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"FROM centos\\n#定义/tmp别名mypath\\nENV mypath /tmp\\n#默认工作目录为mypath\\nWORKDIR $mypath\\nRUN yum -y install vim\\n\\n#暴露的端口\\nEXPOSE 80\\nCMD /bin/bash\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"build\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"docker build -f /media/ws/disk1/docker/mydocker/Dockerfile  -t vim/centos .\\n\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"run\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"docker run -it vim/centos /bin/bash\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"test\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"# 可以看到直接进的是/tmp目录\\n#目录下 touch 1.md\\n# vim 进入测试vim安装是否成功\\n\")])])])]),a._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[a._v(\"CMD/ENTRYPOINT镜像案例\")])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"假设一个场景，我们做一个镜像，需要crul来获取\"),e(\"code\",[a._v(\"https://ip.cn/\")]),a._v(\"中的ip信息。首先考虑CMD命令版本的\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v('FROM centos\\n#如果centos中没有curl安装一个\\nRUN yum install -y curl\\n#相当于命令 curl -s https://ip.cn\\nCMD [\"curl\",\"-s\",\"https://ip.cn\"]\\n```\\n')])])])])]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"ul\",[e(\"li\",[e(\"p\",[a._v(\"之后我们build（myip）镜像然后run（docker run -it myip)，成功返回ip\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[a._v(\"这时我们需要链接返回更多的信息，比如链接的请求头，类似于命令 \"),e(\"code\",[a._v(\"curl -s -i https://ip.cn\")]),a._v(\"返回报文头加ip，这时候在run上追加 -i\")])])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"docker run -it myip -i\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"这时候会报错，相当于后一个-i的CMD命令覆盖了Dockerfile中的CMD命令。这时候需要ENTRYPOINT命令。\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v('FROM centos\\n#如果centos中没有curl安装一个\\nRUN yum install -y curl\\n#相当于命令 curl -s https://ip.cn\\nENTRYPOINT [\"curl\",\"-s\",\"https://ip.cn\"]\\n')])])]),e(\"ul\",[e(\"li\",[a._v(\"之后重复上面步骤，完成！\")])])])]),a._v(\" \"),e(\"div\",{staticClass:\"tip custom-block\"},[e(\"p\",{staticClass:\"custom-block-title\"},[a._v(\"TIP\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"CMD 和 ENTRYPOINT都是执行命令，不同点是ENTRYPOINT是追加，CMD是覆盖。类似StringBuilder和String\")]),a._v(\" \"),e(\"li\",[a._v(\"curl 命令参考文档\")])])]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[a._v(\"自定义镜像tomcat9\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"准备工作：\\n\"),e(\"ul\",[e(\"li\",[a._v(\"选择一个路径mkdir一个mytomcat9文件夹\")]),a._v(\" \"),e(\"li\",[a._v(\"文件夹下准备jdk8和tomcat9的tar包\")]),a._v(\" \"),e(\"li\",[a._v(\"touch一个cp.txt文件\")]),a._v(\" \"),e(\"li\",[a._v(\"touch一个Dockerfile文件\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v('#vim进入Dockerfile\\nFROM centos\\nMAINTAINER gendali<wal365@126.com>\\n#copy宿主机的cp.txt到镜像为container.txt\\nCOPY cp.txt /usr/local/container.txt\\n#把jdk和tomcat添加容器中\\nADD jdk-8u221-linux-x64.tar.gz /usr/local/\\nADD apache-tomcat-9.0.30.tar.gz /usr/local/\\n#安装VIM\\nRUN yum install -y vim\\n#设置登陆落脚点\\nENV MYPATH /usr/local\\nWORKDIR $MYPATH\\n#配置jdk和tomcat环境变量\\nENV JAVA_HOME /usr/local/jdk1.8.0_221\\nENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\\nENV CATALINA_HOME /usr/local/apache-tomcat-9.0.30\\nENV CATALIAN_BASE /usr/local/apache-tomcat-9.0.30\\nENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin\\n#容器运行时的监听端口\\nEXPOSE 8080\\n#启动时运行tomcat\\n#ENTRYPOINT [\"/usr/local/apache-tomcat-9.0.30/bin/startup.sh\"]\\n#CMD [\"/usr/local/apache-tomcat-9.0.30/bin/catanlina.sh\",\"run\"]\\nCMD /usr/local/apache-tomcat-9.0.30/bin/startup.sh && tail -F /usr/local/apache-tomcat-9.0.30/bin/logs/catalina.out\\n')])])])])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"用-v命令run 这个镜像，添加容器卷\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"# 这个长命令分解来看，-p对外端口映射为8090，--name 名字叫mytom9 \\n# -v绑定两个数据卷到宿主机，方便部署项目和看日志\\n# --privileged=true 防止写权限不够\\n# mytomcat9是镜像名\\ndocker run -d -p 8090:8080 --name mytom9 -v /media/ws/disk3/dockersoftware/tomcat9DataVolume:/usr/local/apache-tomcat-9.0.30/webapps/test -v /media/ws/disk3/dockersoftware/tocat9logs/:/usr/local/apache-tomcat-9.0.30/logs --privileged=true mytomcat9\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"exec查看\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"# docker ps查看id\\n# exec查看运行镜像bash\\ndocker exec aa241d0d95e5 ls -l\\n#访问localhost:8090\\n\")])])])]),a._v(\" \"),e(\"li\",[e(\"strong\",[a._v(\"在宿主机容器卷部署应用，同步到tomcat的webapps/test目录下\")])])]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"cd进入  tomcat9DataVolume目录 mkdir WEB-INF\")]),a._v(\" \"),e(\"li\",[a._v(\"cd WEB-INF/\")]),a._v(\" \"),e(\"li\",[a._v(\"touch web.xml\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-xml extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),a._v(\"web-app\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[a._v(\"xmlns\")]),e(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v('\"')]),a._v(\"http://java.sun.com/xml/ns/j2ee\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v('\"')])]),a._v(\"\\n  \"),e(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[e(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[a._v(\"xmlns:\")]),a._v(\"xsi\")]),e(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v('\"')]),a._v(\"http://www.w3.org/2001/XMLSchema-instance\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v('\"')])]),a._v(\"\\n  \"),e(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[e(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[a._v(\"xsi:\")]),a._v(\"schemaLocation\")]),e(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v('\"')]),a._v(\"http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v('\"')])]),a._v(\"\\n  \"),e(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[a._v(\"version\")]),e(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v('\"')]),a._v(\"2.4\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v('\"')])]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\"\\n  \"),e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),a._v(\"display-name\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\"test\"),e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"</\")]),a._v(\"display-name\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"</\")]),a._v(\"web-app\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\"\\n\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"cd .. 之后touch 个a.jsp\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-jsp extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v('<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\\n  pageEncoding=\"UTF-8\"%>\\n<!DOCTYPE html>\\n<html>\\n<head>\\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\\n        <title>mytomcat9 index</title>\\n    </head>\\n    <body>\\n        <%=\"i am docker tomcat self\"%>\\n        <br>\\n        <br>\\n        <% System.out.println(\"===============docker start!\");%>\\n    </body>\\n</html>\\n')])])]),e(\"ul\",[e(\"li\",[a._v(\"创建完成保存退出，查看运行的tomcat9容器中是否生成文件\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"docker exec aa241d0d95e5 ls -l /usr/local/apache-tomcat-9.0.30/webapps/test\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"访问jsp,\"),e(\"code\",[a._v(\"http://localhost:8090/test/a.jsp\")])]),a._v(\" \"),e(\"li\",[a._v(\"访问宿主机的/tocat9logs下sudo cat catalina.out 查看jsp中的===============docker start!打印\")])]),a._v(\" \"),e(\"h3\",{attrs:{id:\"推送镜像到ailiyun\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#推送镜像到ailiyun\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 推送镜像到ailiyun\")]),a._v(\" \"),e(\"h4\",{attrs:{id:\"创建镜像仓库\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#创建镜像仓库\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 创建镜像仓库\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"code\",[a._v(\"https://cr.console.aliyun.com/cn-hangzhou/instances/repositories\")]),a._v(\" 创建镜像仓库\")]),a._v(\" \"),e(\"li\",[a._v(\"选择本地仓库\")]),a._v(\" \"),e(\"li\",[a._v(\"点击管理，查看推送命令\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"sudo docker login --username=xxx@126.com registry.cn-hangzhou.aliyuncs.com\\nsudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/gendali/mytomcat:[镜像版本号]\\nsudo docker push registry.cn-hangzhou.aliyuncs.com/gendali/mytomcat:[镜像版本号]\\n\")])])])])}],!1,null,null,null);t.default=r.exports}}]);","extractedComments":[]}